myLocalTableName <- 'tbl_tidypaysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
### Data Preparation
knitr::opts_chunk$set(echo = TRUE)
# Setup R environment for DATA 606. See http://data606.net for more information.
# Install R packages
# install.packages(c('tidyverse', 'devtools', 'shiny', 'psych', 'reshape2',
#				   'openintro', 'OIdata', 'fivethirtyeight', 'knitr'))
# devtools::install_github('jbryer/DATA606')
# Create vector with all needed libraries
library(knitr)
library(DBI)        # MariaDB Connector
library(tidyr)
library(dplyr)
library(stringr)
library(tidyverse)
library(DT)         # Library to create datatable
library(DATA606)
library(statsr)
### MySQL connection setup
# Read password and user name from remote location in order to establish connection to MySQL
# Connect to my-db as defined in /etc/my.cnf
# Remote definitions
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "/home/mydvtech/CleanGit/MSDS/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
# Remote access definitions
# In order to avoid an Error Connection using 'localhost' use '127.0.0.1' instead.
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_tidypaysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
my.data
### Data Preparation
knitr::opts_chunk$set(echo = TRUE)
# Setup R environment for DATA 606. See http://data606.net for more information.
# Install R packages
# install.packages(c('tidyverse', 'devtools', 'shiny', 'psych', 'reshape2',
#				   'openintro', 'OIdata', 'fivethirtyeight', 'knitr'))
# devtools::install_github('jbryer/DATA606')
# Create vector with all needed libraries
library(knitr)
library(DBI)        # MariaDB Connector
library(tidyr)
library(dplyr)
library(stringr)
library(tidyverse)
library(DT)         # Library to create datatable
library(DATA606)
library(statsr)
### MySQL connection setup
# Read password and user name from remote location in order to establish connection to MySQL
# Connect to my-db as defined in /etc/my.cnf
# Remote definitions
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "/home/mydvtech/CleanGit/MSDS/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
# Remote access definitions
# In order to avoid an Error Connection using 'localhost' use '127.0.0.1' instead.
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_tidypaysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
datatable(my.data, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data <- subset(my.data, select = c("Job_ID", "Base", "Skills"))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "Base Salary",""))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "K","000"))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "\\$",""))
my.skills.data$Base <- as.numeric(my.skills.data$Base)
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, "You can learn valuable new skills like: ",""))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, " and more.",""))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, ", and ",", "))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, " and ",", "))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, "\\.",""))
datatable(my.skills.data, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data_long <- separate_rows(my.skills.data,
Skills,
sep = ", ")
number_skills <- my.skills.data_long %>%
group_by(Job_ID) %>%
dplyr::summarise(Count=n()
)  %>%
arrange(Job_ID)
my.skills.data_new <- left_join(my.skills.data, number_skills, by="Job_ID")
my.skills.data_new$`Skill Value` <- as.numeric(round(my.skills.data_new$Base / my.skills.data_new$Count,0))
datatable(my.skills.data_new, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data_long <- separate_rows(my.skills.data_new,
Skills,
sep = ", ")
my.skills.data_long <- subset(my.skills.data_long, select = c(Skills, `Skill Value`))
datatable(my.skills.data_long, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
summary(my.skills.data_long)
n_mean_sd <- my.skills.data_long %>%
group_by(Skills) %>%
dplyr::summarise(Frequency=n(),
`Min Value` =  round(min(`Skill Value`),0),
`Median Value` = round(median(`Skill Value`),0),
`Mean Value` =  round(mean(`Skill Value`),0),
`Max Value` =  round(max(`Skill Value`),0),
SD = round(sd(`Skill Value`),0)
)  %>%
arrange(Skills)
datatable(n_mean_sd, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
boxplot(data=my.skills.data_long, `Skill Value`~Skills, main="Skills and Salary Value", xlab="Data Science Skills", ylab="Skill Value", col="#ffcc80")
boxplot(data=my.skills.data_long, `Skill Value`~Skills, main="Skills and Salary Value", xlab="Data Science Skills", ylab="Skill Value", col="#ffcc80")
### Data Preparation
knitr::opts_chunk$set(echo = TRUE)
# Setup R environment for DATA 606. See http://data606.net for more information.
# Install R packages
# install.packages(c('tidyverse', 'devtools', 'shiny', 'psych', 'reshape2',
#				   'openintro', 'OIdata', 'fivethirtyeight', 'knitr'))
# devtools::install_github('jbryer/DATA606')
# Create vector with all needed libraries
library(knitr)
library(DBI)        # MariaDB Connector
library(tidyr)
library(dplyr)
library(stringr)
library(tidyverse)
library(DT)         # Library to create datatable
library(DATA606)
library(statsr)
### MySQL connection setup
# Read password and user name from remote location in order to establish connection to MySQL
# Connect to my-db as defined in /etc/my.cnf
# Remote definitions
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "https://github.com/dvillalobos/MSDS/tree/master/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
# Remote access definitions
# In order to avoid an Error Connection using 'localhost' use '127.0.0.1' instead.
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
url <- "/home/mydvtech/CleanGit/MSDS/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "https://github.com/dvillalobos/MSDS/tree/master/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "/home/mydvtech/CleanGit/MSDS/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
# Remote access definitions
# In order to avoid an Error Connection using 'localhost' use '127.0.0.1' instead.
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
datatable(my.data, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data <- subset(my.data, select = c("Job_ID", "Base", "Skills"))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "Base Salary",""))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "K","000"))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "\\$",""))
my.skills.data$Base <- as.numeric(my.skills.data$Base)
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, "You can learn valuable new skills like: ",""))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, " and more.",""))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, ", and ",", "))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, " and ",", "))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, "\\.",""))
datatable(my.skills.data, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
datatable(my.data, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data <- subset(my.data, select = c("Job_ID", "Base", "Skills"))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "Base Salary",""))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "K","000"))
my.skills.data$Base <-  str_trim(str_replace_all(my.skills.data$Base, "\\$",""))
my.skills.data$Base <- as.numeric(my.skills.data$Base)
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, "You can learn valuable new skills like: ",""))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, " and more.",""))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, ", and ",", "))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, " and ",", "))
my.skills.data$Skills <-  str_trim(str_replace_all(my.skills.data$Skills, "\\.",""))
datatable(my.skills.data, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data_long <- separate_rows(my.skills.data,
Skills,
sep = ", ")
number_skills <- my.skills.data_long %>%
group_by(Job_ID) %>%
dplyr::summarise(Count=n()
)  %>%
arrange(Job_ID)
my.skills.data_new <- left_join(my.skills.data, number_skills, by="Job_ID")
my.skills.data_new$`Skill Value` <- as.numeric(round(my.skills.data_new$Base / my.skills.data_new$Count,0))
datatable(my.skills.data_new, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
my.skills.data_long <- separate_rows(my.skills.data_new,
Skills,
sep = ", ")
my.skills.data_long <- subset(my.skills.data_long, select = c(Skills, `Skill Value`))
datatable(my.skills.data_long, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
summary(my.skills.data_long)
n_mean_sd <- my.skills.data_long %>%
group_by(Skills) %>%
dplyr::summarise(Frequency=n(),
`Min Value` =  round(min(`Skill Value`),0),
`Median Value` = round(median(`Skill Value`),0),
`Mean Value` =  round(mean(`Skill Value`),0),
`Max Value` =  round(max(`Skill Value`),0),
SD = round(sd(`Skill Value`),0)
)  %>%
arrange(Skills)
datatable(n_mean_sd, options = list( pageLength = 5, lengthMenu = c(5, 10, 40),   initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#01975b', 'color': '#fff'});",
"}")), rownames=FALSE)
boxplot(data=my.skills.data_long, `Skill Value`~Skills, main="Skills and Salary Value", xlab="Data Science Skills", ylab="Skill Value", col="#ffcc80")
hist(my.skills.data_long$`Skill Value`, breaks = 100, main="Salary Value Frequency", xlab="Skill Value", col="#ffcc80")
hist(my.skills.data_long$`Skill Value`, breaks = 100, main="Salary Value Density", xlab="Skill Value", probability = TRUE, xlim = c(13000, 50000), col="#ffcc80")
hist(n_mean_sd$`Median Value`, breaks = 100, main="Median Value Frequency", xlab="Median Value", col="#ffcc80")
hist(n_mean_sd$`Median Value`, breaks = 100, main="Median Salary Value Density", xlab="Median Skills Value", probability = TRUE, xlim = c(15000, 35000), col="#ffcc80")
qqnorm(n_mean_sd$`Median Value`)
qqline(n_mean_sd$`Median Value`)
# For some reason this function did not render when knitin; it did run in RStudio.
#inference(y = SkillValue, x = Skills, "mean", type = "ht", null = 0, alternative = "greater", method = "theoretical")
Anova <- lm(`Skill Value` ~ Skills, data = my.skills.data_long)
summary(Anova)
anova(Anova)
### Data Preparation
knitr::opts_chunk$set(echo = TRUE)
# Setup R environment for DATA 606. See http://data606.net for more information.
# Install R packages
# install.packages(c('tidyverse', 'devtools', 'shiny', 'psych', 'reshape2',
#				   'openintro', 'OIdata', 'fivethirtyeight', 'knitr'))
# devtools::install_github('jbryer/DATA606')
# Create vector with all needed libraries
library(knitr)
library(DBI)        # MariaDB Connector
library(tidyr)
library(dplyr)
library(stringr)
library(tidyverse)
library(DT)         # Library to create datatable
library(DATA606)
library(statsr)
### MySQL connection setup
# Read password and user name from remote location in order to establish connection to MySQL
# Connect to my-db as defined in /etc/my.cnf
# Remote definitions
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "/home/mydvtech/CleanGit/MSDS/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
# Remote access definitions
# In order to avoid an Error Connection using 'localhost' use '127.0.0.1' instead.
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
### Data Preparation
knitr::opts_chunk$set(echo = TRUE)
# Setup R environment for DATA 606. See http://data606.net for more information.
# Install R packages
# install.packages(c('tidyverse', 'devtools', 'shiny', 'psych', 'reshape2',
#				   'openintro', 'OIdata', 'fivethirtyeight', 'knitr'))
# devtools::install_github('jbryer/DATA606')
# Create vector with all needed libraries
library(knitr)
library(DBI)        # MariaDB Connector
library(RMySQL)
library(tidyr)
library(dplyr)
library(stringr)
library(tidyverse)
library(DT)         # Library to create datatable
library(DATA606)
library(statsr)
### MySQL connection setup
# Read password and user name from remote location in order to establish connection to MySQL
# Connect to my-db as defined in /etc/my.cnf
# Remote definitions
readMariaDBTable <- function(myLocalHost = NULL, myLocalMySQLSchema = NULL, myLocalTableName = NULL){
url <- "/home/mydvtech/CleanGit/MSDS/606/Projects/data/mysql.csv"
MySQLConnect <- read.csv(url, header = FALSE, sep = ",", stringsAsFactors=FALSE)
# Remote access definitions
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
# Create a RMySQL Connection
mydbConnection <- dbConnect(RMySQL::MySQL(),
user = myLocalUser,
password = myLocalPassword,
host = myLocalHost,
dbname = myLocalMySQLSchema)
# Check to see if our table exists? and read our data
myLocalTableName <- tolower(myLocalTableName)
if (dbExistsTable(mydbConnection, name = myLocalTableName)  == TRUE){
my.data <- dbReadTable(mydbConnection, name = myLocalTableName)
}
# Closing connection with local MAriaDB Schema
dbDisconnect(mydbConnection)
# Return Data
return(my.data)
}
# Remote access definitions
# In order to avoid an Error Connection using 'localhost' use '127.0.0.1' instead.
myLocalPassword <- MySQLConnect$V1
myLocalUser <- MySQLConnect$V2
myLocalHost <- '127.0.0.1' # or 'website.com' depending on where is the SQL server located.
myLocalMySQLSchema <- 'mylocalSQL'
myLocalTableName <- 'tbl_paysatxt'
my.data <- readMariaDBTable(myLocalHost = myLocalHost,
myLocalMySQLSchema = myLocalMySQLSchema,
myLocalTableName = myLocalTableName)
colnames(my.data) <- c("Job_ID", "Position", "Base", "Annual", "Bonus", "Total", "Skills", "Location")
